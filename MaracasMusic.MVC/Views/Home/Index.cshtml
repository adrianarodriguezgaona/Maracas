@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    ViewData["Title"] = "Home Page";
}


<article id="app">


    <header></header>

    <nav class="col-md-12 navbar navbar-default sticky-top">
        <div class="navbar-fluid">

            <ul class="nav navbar-nav" style="flex-direction: row;">
                <li v-for="item in productTypes" v-on:click="fetchProducts(item.name)" style="cursor:pointer; margin-right: 50px">
                    <span>{{item.nameForView}}</span>
                </li>
                <li v-on:click="openBasket()" style="cursor:pointer" data-toggle="modal" data-target="#basketModal">

                    <span>
                        <img src="~/icons/basket.png" style="width:25px" />
                        <span class="badge badge-pill badge-danger">{{basket.length}}</span>

                    </span>

                </li>
            </ul>
        </div>
    </nav>



    <div v-if="viewOrder === false">
        <div id="products">

            <div class="row">
                <div class="col-sm-12">
                    <div class="fotos" v-for="product in products" style="cursor:pointer">
                        <img :src="`https://localhost:44378/api/product/imagebyid/${product.id}`" class="fotosProduct" />

                        <div class="productContent">
                            <h3>{{ product.name}}</h3>
                            <p>{{product.description}} -  {{product.artistName}}</p>

                            <div style="display:flex; flex-direction:row" >

                                <button v-on:click="getSelectedProduct(product.id)" type="button" class="basicbtn" data-toggle="modal" data-target="#exampleModal">
                                    meer informatie
                                </button>

                                <button  style="margin-left: 10px; width: 60px; background-color:#d39e00" v-on:click="addToBasket(product)" class="basicbtn">
                                    <img src="~/icons/basket.png" style="width:25px" /><span>+</span>
                                </button>
                            </div>

                           
                        </div>
                    </div>
                </div>

            </div>


        </div>
    </div>

    <div v-else style="border-right:1px solid rgba(222, 226, 232, 1); width:500px">


        @if (SignInManager.IsSignedIn(User))
        {
            <div v-if="orderOutcome === false">
                <h3>Plaats jouw bestelling</h3>

                <div class="row">
                    <div class="col-md-4">
                        <p>Klant identificatienummer: {{client.id}}</p>
                    </div>
                </div>


                <div class="row">
                    <div class="col-md-4">
                        <span>Datum bestelling: </span>  <input v-model="order.DateOrder" disabled="disabled" style="background-color:white; border: 0px none" />
                    </div>
                </div>

                <div class="row" style="margin-top:15px">
                    <div class="col-md-6">
                        <span>Uw adres</span> <input placeholder="straat, huisnummer en postcode" id="Address" type="text" name="Address" v-model="order.Address" class="form-control" />
                    </div>
                </div>


                <button v-on:click="submitOrder()">Bestelling bevestigen</button>

            </div>

            <div v-else>

                <div v-if="this.orderSuccess === true">

                    <div class="alert alert-success" role="alert">
                        Order succesvol vezonden!!
                    </div>
                    <p>
                        Order wordt zodra we de betaling ontvangen hebben
                        verstuurd naar {{order.Address}}
                    </p>

                    <p>Gelieve het bedrag van: {{order.TotalOrder}} over te schrijven naar volgend rekeningnummer: <br />
                      BE578-5546-4534-4434 met volgende mededeling: {{client.name}}_{{order_Id}}</p>




                </div>
                <div v-else>

                    <div class="alert alert-danger" role="alert">
                        Er is iets foutgelopen, probeer het later opnieuw!!
                    </div>

                </div>


            </div>

        }

        else
        {
            <p> Je moet ingelogd zijn om te kunnen bestellen </p>
        }

    </div>

    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" style="width: 100%" role="document">
            <div class="modal-content" style="margin: auto">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">{{selectedProduct.name}}</h5>

                    <button class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <ul>
                        <li>Omschrijving:  {{selectedProduct.description}}</li>
                        <li>Product categorie:  {{selectedProduct.productTypeName}}</li>
                    </ul>
                    <hr />
                    <div class="productDetail" v-if="selectedProduct.productTypeId === 1">
                       <div>
                        <img :src="`https://localhost:44378/api/product/imagebyid/${selectedProduct.id}`" class="fotosProduct" />
                       </div>
                       
                        <div style="border-top:1px solid">
                        <p style="border-bottom: 1px solid">Details product</p>
                       </div>
                        <ul class="detailAlign">
                            <li>Naam artiest  {{selectedProduct.artistName}}</li>
                            <li>Genre:  {{selectedProduct.genreName}}</li>
                            <li>Prijs:  {{selectedProduct.price}} euro</li>
                        </ul>
                    </div>

                    <div class="productDetail" v-else-if="selectedProduct.productTypeId === 2">
                        <img :src="`https://localhost:44378/api/product/imagebyid/${selectedProduct.id}`" class="fotosProduct" />

                        <ul class="detailAlign">
                            <li>Type instrument:  {{selectedProduct.instrumentTypeName}}</li>
                            <li>Naam instrument:  {{selectedProduct.name}}</li>
                            <li>Prijs:  {{selectedProduct.price}} euro</li>
                        </ul>
                    </div>

                    <div class="productDetail" v-else>
                        <img :src="`https://localhost:44378/api/product/imagebyid/${selectedProduct.id}`" class="fotosProduct" />

                        <ul class="detailAlign">
                            <li>Naam artiest:  {{selectedProduct.artistName}}</li>
                            <li>Genre:  {{selectedProduct.genreName}}</li>
                            <li>Name:   {{selectedProduct.name}}</li>
                            <li>Prijs:  {{selectedProduct.price}} euro</li>
                        </ul>
                    </div>


                    <div class="modal-footer">
                        <button class="basicbtn" data-dismiss="modal">Sluit</button>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div class="modal fade" id="basketModal" tabindex="-1" role="dialog" aria-labelledby="basketlabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" style="width: 100%" role="document">
            <div class="modal-content" style="width: 70%; margin: auto">
                <div class="modal-header">
                    <h5 class="modal-title" id="basketlabel">Winkelmandje</h5>

                    <button class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">


                    <div class="row" style="border-bottom: 1px solid; margin-bottom: 10px">

                        <div class="col-md-4"> Naam artikel</div>

                        <div class="col-md-2"> prijs/stuk</div>

                        <div class="col-md-2"> aantal</div>


                        <div class="col-md-2">totaal</div>


                    </div>


                    <div class="row" v-for="product in basket">
                        <div class="col-md-4">

                            <p>{{product.name}}</p>

                        </div>
                        <div class="col-md-2">

                            <p>{{product.price}} euro</p>

                        </div>

                        <div class="col-md-2">
                            <input v-on:keyup="updateCookie()" v-model="product.amount" />
                        </div>

                        <div class="col-md-2">

                            <p>{{product.amount * product.price}} euro</p>

                        </div>

                        <div class="col-md-2">

                            <button v-on:click="deleteFromBasket(product)">Verwijder</button>

                        </div>

                    </div>

                    <div class="row justify-content-end">

                        <div class="col-md_4">
                            <p>totaal: {{basketTotal}}</p>
                        </div>

                        <div class="col-md-2"></div>

                    </div>

                    <div class="row justify-content-end">

                        <div class="col-md_10">

                        </div>

                        <div class="col-md-2 justify-content-end">
                            <a style="cursor:pointer" v-on:click="goToOrder()">Naar order</a>

                        </div>

                    </div>


                </div>
            </div>
        </div>
    </div>

</article>








@section scripts {

    <script>

    </script>
    <script src="~/lib/vue/vue.js">
    </script>
    <script src="https://unpkg.com/vue/dist/vue.js"></script>
    <script src="https://unpkg.com/vue-cookies@1.6.1/vue-cookies.js"></script>
    <script>

        var apiurl = 'https://localhost:44378/api/product';
        var clientApi = 'https://localhost:44378/api/client';
        var orderApi = 'https://localhost:44378/api/orders';
        var orderDetailApi = 'https://localhost:44378/api/orderdetails';


        var app = new Vue({

            el: '#app',
            data: {

                test: "boodschap",
                selectedProduct: {},
                products: null,
                productTypes: [{ "nameForView": "Alle Producten", "name": "product" },
                { "nameForView": "Cds", "name": "Cd" },
                { "nameForView": "Instrumenten", "name": "Instrument" },
                { "nameForView": "Partituren", "name": "score" }],

                basket: [],

                basketTotal: 0,
                viewOrder: false,


                order: {
                    ClientId: 0,
                    Address: null,
                    DateOrder: null,

                },

                client: {},
                order_Id: 0,

                orderOutcome: false,
                orderSuccess: false,


            },


            created: function () {
                var self = this;
                self.fetchProducts("product");
                self.cookieCheck();
                self.calculateTotalBasket(self.basket);

            },

            methods: {
                fetchProducts: function (type) {

                    self = this;
                    self.viewOrder = false;

                    if (type == "product") {
                        fetch(`${apiurl}`)
                            .then(res => res.json())
                            .then(function (products) {
                                self.products = products;
                            })
                            .catch(error => console.log(error))

                    }
                    else
                        fetch(`${apiurl}/detailByType/${type}`)
                            .then(res => res.json())
                            .then(function (products) {
                                self.products = products;
                            })
                            .catch(error => console.log(error))

                },

                fetchImage: function (imgId) {
                    fetch(`${apiurl}/ImageById/${imgId}`)
                    then(image => images = image);
                },


                getSelectedProduct: function (product) {


                    self = this;

                    fetch(`${apiurl}/detail/${product}`)
                        .then(res => res.json())
                        .then(function (detail) {
                            self.selectedProduct = detail;

                        })
                        .catch(error => console.log(error))

                },



                showModal: $('#myModal').on('shown.bs.modal', function () {
                    $('#myInput').trigger('focus').val()
                }),

                openBasket: $('#basketModal').on('shown.bs.modal', function () {
                    $('#myInput').trigger('focus').val()

                }),


                addToBasket: function (product) {
                    self = this;
                    product.amount = 1;
                    self.basket.push(product);

                    self.calculateTotalBasket(self.basket);

                    Vue.$cookies.config('30d');

                    var json = JSON.stringify(self.basket)

                    this.$cookies.set('basket', json);

                    var cookieobject = JSON.parse(this.$cookies.get('basket'));
                    console.log(cookieobject)

                },

                deleteFromBasket: function (product) {
                    console.log("binnen");

                    self.basket.pop(product);
                    this.calculateTotalBasket(self.basket)
                    var json = JSON.stringify(self.basket)

                    this.$cookies.set('basket', json);

                },

                updateCookie: function () {
                    console.log("cookieupdate");

                    var self = this;
                    self.calculateTotalBasket(self.basket);

                    var json = JSON.stringify(self.basket)

                    this.$cookies.set('basket', json);
                },



                calculateTotalBasket: function (basket) {

                    self = this;
                    self.basketTotal = 0;
                    basket.forEach(element => (self.calulatePriceArticle(element)));

                },

                calulatePriceArticle: function (element) {
                    console.log("binnen");
                    var self = this;
                    var total = element.price * element.amount;
                    self.basketTotal += total;
                },

                GetUserInfo: function (clientId) {
                    fetch(`${clientApi}/getbyemail/@User.Identity.Name`)
                        .then(res => res.json())
                        .then(json => this.client = json)

                },

                GetCurrentDate: function () {
                    var today = new Date();
                    this.order.DateOrder = today;
                },

                goToOrder: function () {

                  $('#basketModal').modal('hide');
                    this.viewOrder = true;
                    this.GetUserInfo();
                    this.GetCurrentDate();
                    this.orderOutcome = false;



                },

                cookieCheck: function () {
                    if (this.$cookies.get('basket') != null) {

                  this.basket = JSON.parse(this.$cookies.get('basket'));

                    }

                },

                submitOrder: function () {
                    var self = this;
                    var hasError = false;
                    self.order.ClientId = self.client.id;
                    


                    self.order.TotalOrder = self.basketTotal;

                    fetch(`${orderApi}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(self.order),
                    })
                        .then((response) => response.json())
                        .then((data) => {
                            self.order_Id = data.id;
                            console.log('Success:', data);

                        })
                        .catch((error) => {
                            console.error('Error:', error);
                            hasError = true;
                        });

                    var orderDetailsToSend = null;
                    setTimeout(function () {


                        self.basket.forEach(element => {
                            if (hasError === false) {
                                orderDetailsToSend = {

                                    ProductId: element.id,
                                    Amount: element.amount,
                                    OrderId: self.order_Id,
                                    Name: element.name,
                                }
                                console.log(orderDetailsToSend)

                                fetch(`${orderDetailApi}`, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify(orderDetailsToSend),
                                })
                                    .then((response) => response.json())
                                    .then((data) => {
                                        console.log('Success:', data);

                                    })
                                    .catch((error) => {
                                        console.error('Error:', error);
                                        hasError = true;
                                    });

                            }
                        })

                        self.orderOutcome = true;

                        if (hasError === false) {
                            self.orderSuccess = true;
                            self.basket = [];
                            self.basketTotal = 0;
                        this.$cookies.remove("basket");
                        }

                        else self.orderSuccess = false;

                    }, 3000)

;



                }
            },
        });

    </script>

}

@*<style>
    .fotos {
        height: 250px;
        width: 95%;
        border: 1px solid #000;
        margin:15px 5px 15px 5px;
        padding:5px;

    }
    .fotosHotel {
        height:200px;
        width:250px;
        margin:15px 10px 5px 5px;
        float:left;
    }

    </style>*@
