@{
    ViewData["Title"] = "Admin page";
}
<h1>@ViewData["Title"]</h1>


<article id="app" class="wrapper wrapper-content" >

    <div class=" row">
        <div class="col-sm-12">
            <div class="ibox">
                <div class="ibox-content">
                    <div class="row m-t-sm">
                        <div class="col-lg-12">
                            <div class="panel blank-panel">
                                <div class="panel-heading">
                                    <div class="panel-options">
                                        <ul class="nav nav-tabs">
                                            <li>
                                                <a v-on:click="$event.preventDefault()" href="#panel-products"
                                                   role="tab"
                                                   data-toggle="tab" aria-expanded="false">Products</a>
                                            </li>
                                            <li>
                                                <a v-on:click="$event.preventDefault()" href="#panel-clients"
                                                   role="tab"
                                                   data-toggle="tab" aria-expanded="false">Klanten</a>
                                            </li>
                                            <li>
                                                <a v-on:click="" href="#panel-orders"
                                                   role="tab"
                                                   data-toggle="tab" aria-expanded="false">Bestellingen</a>
                                            </li>
                                            <li>
                                                <a v-on:click="" href="#panel-categories"
                                                   role="tab"
                                                   data-toggle="tab" aria-expanded="false">Categories</a>
                                            </li>
                                            <li>
                                                <a v-on:click="" href="#panel-instrumentTypes"
                                                   role="tab"
                                                   data-toggle="tab" aria-expanded="false">Instrument types</a>
                                            </li>
                                            <li>
                                                <a v-on:click="" href="#panel-artists"
                                                   role="tab"
                                                   data-toggle="tab" aria-expanded="false"> Artiesten</a>
                                            </li>
                                            <li>
                                                <a v-on:click="" href="#panel-genres"
                                                   role="tab"
                                                   data-toggle="tab" aria-expanded="false"> Genres</a>
                                            </li>
                                        </ul>

                                    </div>
                                    <div class="panel-body">
                                        <div class="tab-content">
                                            <div class="tab-pane" id="panel-products">
                                                <div class="row">
                                                    <header class="col-md-4">
                                                        <h3>{{message}}</h3>
                                                        <nav>
                                                            <ul class="list-group">
                                                                <li v-for="product in products" v-on:click="fetchProductDetails(product)" :class="getProductClass(product)" style="cursor:pointer">
                                                                    <span class="productName">{{product.name}}</span>
                                                                </li>
                                                            </ul>
                                                        </nav>
                                                    </header>
                                                    <div v-if="currentProduct" class="col-md-4">
                                                        <h3>Details</h3>
                                                        <div class="form-horizontal">
                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">Naam</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" v-model="currentProduct.name" :readonly="isReadOnly">
                                                                </div>
                                                            </div>
                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">Artiest</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" v-model="currentProduct.artist.name" v-if="isReadOnly" :readonly="isReadOnly">
                                                                    <select v-model="currentProduct.artist" class="form-control" v-if="!isReadOnly">
                                                                        <option v-for="artist in artists" :value="artist">{{ artist.name }}</option>
                                                                    </select>
                                                                </div>
                                                            </div>
                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">Genre</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" :value="currentProduct.genre.name" v-if="isReadOnly" :readonly="isReadOnly">
                                                                    <select v-model="currentProduct.genre" class="form-control" v-if="!isReadOnly">
                                                                        <option v-for="genre in genres" :value="genre">{{ genre.name }}</option>
                                                                    </select>
                                                                </div>
                                                            </div>
                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">InstrumentType</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" :value="currentProduct.instrumentType.name" v-if="isReadOnly" :readonly="isReadOnly">
                                                                    <select v-model="currentProduct.instrumentType" class="form-control" v-if="!isReadOnly">
                                                                        <option v-for="instrumentType in instrumentTypes" :value="instrumentType">{{ instrumentType.name }}</option>
                                                                    </select>
                                                                </div>
                                                            </div>
                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">Categorie</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" :value="currentProduct.productType.name" v-if="isReadOnly" :readonly="isReadOnly">
                                                                    <select v-model="currentProduct.productType" class="form-control" v-if="!isReadOnly">
                                                                        <option v-for="productType in categories" :value="productType">{{ productType.name }}</option>
                                                                    </select>
                                                                </div>
                                                            </div>


                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">Beschrijving</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" v-model="currentProduct.description" :readonly="isReadOnly">
                                                                </div>
                                                            </div>
                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">FOTO</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" v-model="currentProduct.foto" :readonly="isReadOnly">
                                                                </div>
                                                            </div>
                                                            <div class="form-group">
                                                                <input type="file" v-on:change="onFileSelected" />
                                                                <button v-on:click="onUpload">Opslaan</button>
                                                            </div>

                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">Prijs</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" v-model="currentProduct.price" :readonly="isReadOnly">
                                                                </div>
                                                            </div>

                                                            <button v-on:click="toEditMode(true)" v-if="isReadOnly" class="btn btn-primary">Editeren</button>
                                                            <button v-on:click="toEditMode(false)" v-if="isReadOnly" class="btn btn-warning">Nieuw</button>
                                                            <button v-on:click="confirmDeleteProduct()" v-if="isReadOnly" class="btn btn-danger">Verwijderen</button>
                                                            <button v-on:click="save" v-if="!isReadOnly" class="btn btn-primary">Opslaan</button>
                                                            <button v-on:click="cancel" v-if="!isReadOnly" class="btn btn-default">Annuleren</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>


                                            <div class="tab-pane" id="panel-clients">
                                                <div class="row">
                                                    <header class="col-md-4">

                                                        <h3>{{messageClientForm}}</h3>
                                                        <nav>
                                                            <ul class="list-group">
                                                                <li v-for="client in clients" v-on:click="fetchClientDetails(client)" :class="getClientClass(client)" style="cursor:pointer">
                                                                    <span class="clientName">{{client.id}}</span>
                                                                </li>
                                                            </ul>
                                                        </nav>
                                                    </header>
                                                    <div v-if="currentProduct" class="col-md-4">
                                                        <h3>Details</h3>
                                                        <div class="form-horizontal">
                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">Naam</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" v-model="currentClient.name" :readonly="isReadOnly">
                                                                </div>
                                                            </div>

                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">E-mail</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" v-model="currentClient.email" :readonly="isReadOnly">
                                                                </div>
                                                            </div>

                                                            <button v-on:click="toEditClientMode(true)" v-if="isReadOnly" class="btn btn-primary">Editeren</button>
                                                            @*<button v-on:click="toEditClientMode(false)" v-if="isReadOnly" class="btn btn-warning">Nieuw</button>*@
                                                            <button v-on:click="confirmDeleteClient()" v-if="isReadOnly" class="btn btn-danger">Verwijderen</button>
                                                            <button v-on:click="saveClient" v-if="!isReadOnly" class="btn btn-primary">Opslaan</button>
                                                            <button v-on:click="cancelForClientForm" v-if="!isReadOnly" class="btn btn-default">Annuleren</button>
                                                        </div>
                                                    </div>

                                                </div>

                                            </div>

                                            <div class="tab-pane" id="panel-orders">
                                                <div class="row">
                                                    <header class="col-md-4">

                                                        <h3>{{messageOrdersForm}}</h3>
                                                        <nav>
                                                            <ul class="list-group">
                                                                <li v-for="order in orders" v-on:click="fetchOrderDetails(order)" :class="getOrderClass(order)" style="cursor:pointer">
                                                                    <span class="orderName">{{order.id}}</span>
                                                                </li>
                                                            </ul>
                                                        </nav>
                                                    </header>
                                                    <div v-if="currentOrder" class="col-md-4">
                                                        <h3>Details order</h3>
                                                        <div class="form-horizontal">
                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">Klant nummer</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" v-model="currentOrder.clientId" :readonly="isReadOnly">
                                                                </div>
                                                            </div>

                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">Adres</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" v-model="currentOrder.address" :readonly="isReadOnly">
                                                                </div>
                                                            </div>
                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">Datum bestelling</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" v-model="currentOrder.dateOrder" :readonly="isReadOnly">
                                                                </div>
                                                            </div>
                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">Totaal bestelling</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" v-model="currentOrder.totalOrder" :readonly="isReadOnly">
                                                                </div>
                                                            </div>

                                                            <h4>Details Bestelling:</h4>

                                                            <table class="table">
                                                                <thead>
                                                                    <tr>
                                                                        <th scope="col">Id</th>
                                                                        <th scope="col">Product</th>
                                                                        <th scope="col">Aantal</th>

                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    <tr v-for="detail in orderDetails">
                                                                        <th scope="row">{{detail.id}}</th>
                                                                        <td>{{detail.name}}</td>
                                                                        <td>{{detail.amount}}</td>

                                                                    </tr>

                                                                </tbody>
                                                            </table>


                                                            <button v-on:click="toEditOrderMode(true)" v-if="isReadOnly" class="btn btn-primary">Editeren</button>
                                                            @*<button v-on:click="toEditOrderMode(false)" v-if="isReadOnly" class="btn btn-warning">Nieuw</button>*@
                                                            <button v-on:click="confirmDeleteOrder()" v-if="isReadOnly" class="btn btn-danger">Verwijderen</button>
                                                            <button v-on:click="saveOrder" v-if="!isReadOnly" class="btn btn-primary">Opslaan</button>
                                                            <button v-on:click="cancelForOrderForm" v-if="!isReadOnly" class="btn btn-default">Annuleren</button>
                                                        </div>
                                                    </div>
                                                </div>

                                            </div>

                                            <div class="tab-pane" id="panel-categories">
                                                <div class="row">
                                                    <header class="col-md-4">

                                                        <h3>{{messageCategoriesForm}}</h3>
                                                        <nav>
                                                            <ul class="list-group">
                                                                <li v-for="categorie in categories" v-on:click="fetchCategorieDetails(categorie)" :class="getCategorieClass(categorie)" style="cursor:pointer">
                                                                    <span class="categorieName">{{categorie.id}}</span>
                                                                </li>
                                                            </ul>
                                                        </nav>
                                                    </header>
                                                    <div v-if="currentCategorie" class="col-md-4">
                                                        <h3>Details categorie</h3>
                                                        <div class="form-horizontal">

                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">Naam</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" v-model="currentCategorie.name" :readonly="isReadOnly">
                                                                </div>
                                                            </div>


                                                            <button v-on:click="toEditCategorieMode(true)" v-if="isReadOnly" class="btn btn-primary">Editeren</button>
                                                            <button v-on:click="toEditCategorieMode(false)" v-if="isReadOnly" class="btn btn-warning">Nieuw</button>
                                                            <button v-on:click="confirmDeleteCategory()" v-if="isReadOnly" class="btn btn-danger">Verwijderen</button>
                                                            <button v-on:click="saveCategorie" v-if="!isReadOnly" class="btn btn-primary">Opslaan</button>
                                                            <button v-on:click="cancelForCategorieForm" v-if="!isReadOnly" class="btn btn-default">Annuleren</button>
                                                        </div>
                                                    </div>
                                                </div>

                                            </div>

                                            <div class="tab-pane" id="panel-instrumentTypes">
                                                <div class="row">
                                                    <header class="col-md-4">

                                                        <h3>{{messageForm}}</h3>
                                                        <nav>
                                                            <ul class="list-group">
                                                                <li v-for="type in instrumentTypes" v-on:click="fetchInstrumentTypeDetails(type)" :class="getInstrumentTypeClass(type)" style="cursor:pointer">
                                                                    <span class="instrumentTypeName">{{type.id}}</span>
                                                                </li>
                                                            </ul>
                                                        </nav>
                                                    </header>
                                                    <div v-if="currentInstrumentType" class="col-md-4">
                                                        <h3>Details instrument type</h3>
                                                        <div class="form-horizontal">

                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">Naam</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" v-model="currentInstrumentType.name" :readonly="isReadOnly">
                                                                </div>
                                                            </div>


                                                            <button v-on:click="toEditInstrumentTypeMode(true)" v-if="isReadOnly" class="btn btn-primary">Editeren</button>
                                                            <button v-on:click="toEditInstrumentTypeMode(false)" v-if="isReadOnly" class="btn btn-warning">Nieuw</button>
                                                            <button v-on:click="confirmDeleteInstrumentType()" v-if="isReadOnly" class="btn btn-danger">Verwijderen</button>
                                                            <button v-on:click="saveInstrumentType" v-if="!isReadOnly" class="btn btn-primary">Opslaan</button>
                                                            <button v-on:click="cancelForInstrumentTypeForm" v-if="!isReadOnly" class="btn btn-default">Annuleren</button>
                                                        </div>
                                                    </div>
                                                </div>

                                            </div>


                                            <div class="tab-pane" id="panel-artists">
                                                <div class="row">
                                                    <header class="col-md-4">

                                                        <h3>{{messageForm}}</h3>
                                                        <nav>
                                                            <ul class="list-group">
                                                                <li v-for="artist in artists" v-on:click="fetchArtistDetails(artist)" :class="getArtistClass(artist)" style="cursor:pointer">
                                                                    <span class="artistName">{{artist.id}}</span>
                                                                </li>
                                                            </ul>
                                                        </nav>
                                                    </header>
                                                    <div v-if="currentArtist" class="col-md-4">
                                                        <h3>Details artiest</h3>
                                                        <div class="form-horizontal">

                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">Naam</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" v-model="currentArtist.name" :readonly="isReadOnly">
                                                                </div>
                                                            </div>
                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">Genre</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" :value="currentArtist.genre.name" v-if="isReadOnly" :readonly="isReadOnly">
                                                                    <select v-model="currentArtist.genre" class="form-control" v-if="!isReadOnly">
                                                                        <option v-for="genre in genres" :value="genre">{{ genre.name }}</option>
                                                                    </select>
                                                                </div>
                                                            </div>

                                                            <button v-on:click="toEditArtistMode(true)" v-if="isReadOnly" class="btn btn-primary">Editeren</button>
                                                            <button v-on:click="toEditArtistMode(false)" v-if="isReadOnly" class="btn btn-warning">Nieuw</button>
                                                            <button v-on:click="confirmDeleteArtist()" v-if="isReadOnly" class="btn btn-danger">Verwijderen</button>
                                                            <button v-on:click="saveArtist" v-if="!isReadOnly" class="btn btn-primary">Opslaan</button>
                                                            <button v-on:click="cancelForArtistForm" v-if="!isReadOnly" class="btn btn-default">Annuleren</button>
                                                        </div>
                                                    </div>
                                                </div>

                                            </div>

                                            <div class="tab-pane" id="panel-genres">
                                                <div class="row">
                                                    <header class="col-md-4">

                                                        <h3>{{messageForm}}</h3>
                                                        <nav>
                                                            <ul class="list-group">
                                                                <li v-for="genre in genres" v-on:click="fetchGenreDetails(genre)" :class="getGenreClass(genre)" style="cursor:pointer">
                                                                    <span class="genreName">{{genre.id}}</span>
                                                                </li>
                                                            </ul>
                                                        </nav>
                                                    </header>
                                                    <div v-if="currentGenre" class="col-md-4">
                                                        <h3>Details artiest</h3>
                                                        <div class="form-horizontal">

                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label small">Naam</label>
                                                                <div class="col-sm-10">
                                                                    <input type="text" class="form-control" v-model="currentGenre.name" :readonly="isReadOnly">
                                                                </div>
                                                            </div>
                                                           

                                                            <button v-on:click="toEditGenreMode(true)" v-if="isReadOnly" class="btn btn-primary">Editeren</button>
                                                            <button v-on:click="toEditGenreMode(false)" v-if="isReadOnly" class="btn btn-warning">Nieuw</button>
                                                            <button v-on:click="confirmDeleteGenre()" v-if="isReadOnly" class="btn btn-danger">Verwijderen</button>
                                                            <button v-on:click="saveGenre" v-if="!isReadOnly" class="btn btn-primary">Opslaan</button>
                                                            <button v-on:click="cancelForGenreForm" v-if="!isReadOnly" class="btn btn-default">Annuleren</button>
                                                        </div>
                                                    </div>
                                                </div>

                                            </div>




                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</article>





@section scripts {
    <script src="~/lib/vue/vue.js"></script>

    <script>
        var apiUri ='https://localhost:44378/api/';
      var app = new Vue({
          el: '#app',
          data: {
                message: 'Loading page...',
                messageClientForm: '',
                messageOrdersForm: '',
                messageCategoriesForm: '',
                messageForm :'',
                products: null,
                artists: null,
                genres: null,
                instrumentTypes: null,
                clients: null,
                orders: null,
                orderDetails: null,
                categories: null,
                instrumentTypes: null,
                currentClient: null,
                currentProduct: null,
                currentOrder: null,
                currentCategorie: null,
                currentInstrumentType: null,
                currentArtist: null,
                currentGenre: null,
                isReadOnly: true,
                isEdit: false,
                selectedFile: null
          },

          created: function () {
                var self = this;
                self.fetchProducts();
                self.fetchArtists();
                self.fetchGenres();
                self.fetchInstrumentTypes();
                self.fetchProductTypes();
                self.fetchClients();
                self.fetchOrders();
               

          },
          methods: {
                fetchProducts: function () {
                    self = this;
                    fetch(`${apiUri}Product/Basic`)
                        .then(res => res.json())
                        .then(function (products) {
                            products.forEach(function (product, i) {
                                product.isActive = false;
                            });
                            self.products = products;
                            self.message = 'Overview';
                            if (self.products.length > 0) {
                                self.fetchProductDetails(self.products[0]);
                            }
                        })

                        .catch(err => console.error('Fout: ' + err));
                },
                fetchProductDetails: function (product) {
                    self = this;
                    if (!self.isReadOnly) return;
                    fetch(`${apiUri}Product/${product.id}`)
                        .then(res => res.json())
                        //.then(function (test) {console.log(test)})
                        .then(function (res) {
                            self.currentProduct = res;
                            self.makeProductActive(product.id);
                        })
                        .catch(err => console.error('Fout: ' + err));
                },
                makeProductActive: function (productId) {
                    self.products.forEach(function (product) {
                        product.isActive = product.id === productId ? true : false;
                    });
                },

                getProductClass: function (product) {
                    if (product.isActive) return 'list-group-item active';
                    return 'list-group-item';
                },
              

                toEditMode: function (isEdit) {
                    self = this;
                    self.isReadOnly = false;
                    self.isEdit = isEdit;
                    if (!isEdit) {
                        self.currentProduct = { "name": "", "description": "", "foto": "", "price": 0,  "artistId": 0, "artist": { "name": "",  "id": 0 }, "genreId": 0, "genre": { "name": "",  "id": 0 }, "instrumentTypeId":0 , "instrumentType":{ "name": "", "id": 0 },  "productType":{ "name": "", "id": 0 }, "id": 0 };
                    }
                },
                save: function () {
                    var self = this;
                    self.currentProduct.artistId = self.currentProduct.artist.id;
                    self.currentProduct.genreId = self.currentProduct.genre.id;
                    self.currentProduct.instrumentTypeId = self.currentProduct.instrumentType.id;
                    self.currentProduct.productTypeId = self.currentProduct.productType.id;

                    var ajaxHeaders = new Headers();
                    ajaxHeaders.append("Content-Type", "application/json");
                    var ajaxConfig = {
                        method: 'PUT',
                        body: JSON.stringify(self.currentProduct),
                        headers: ajaxHeaders
                    };

                    if (self.isEdit) {
                        let myRequest = new Request(`${apiUri}Product/${self.currentProduct.id}`, ajaxConfig);
                        fetch(myRequest)
                            .then(res => res.json())
                            .then(res => {
                                self.updateProductList(res);
                            })
                            .catch(err => console.error('Fout: ' + err));
                    }
                    else {
                        ajaxConfig.method = 'POST';
                        let myRequest = new Request(`${apiUri}Product/`, ajaxConfig);
                        fetch(myRequest)
                            .then(res => res.json())
                            .then(res => {
                                self.addProductToList(res);
                            })
                            .catch(err => console.error('Fout: ' + err));
                    }
                    self.isEdit = false;
                    self.isReadOnly = true;
                },
                addProductToList: function (product) {

                    self.currentProduct.id = product.id;
                    self.products.push(product);
                    self.fetchProductDetails(self.products[self.products.length - 1]);
                },
                updateProductList: function (product) {

                    var updatedProduct = self.products.filter(p => p.id === product.id)[0];
                    updatedProduct.name = product.name;
                },
                cancel: function () {
                    var self = this;
                    self.isReadOnly = true;
                    self.isEdit = false;
                    if (self.isEdit) {
                        self.fetchProductDetails(self.currentProduct);
                    } else {
                        self.fetchProductDetails(self.products[0]);
                    }
                },
                deleteProduct: function () {
                    self = this;
                    fetch(`${apiUri}Product/${self.currentProduct.id}`, { method: 'DELETE' })
                        .then(res => res.json())
                        .then(function (res) {
                            self.products.forEach(function (product, i) {
                                if (product.id === self.currentProduct.id) {
                                    self.products.splice(i, 1);
                                    return;
                                }
                            });
                            if (self.products.length > 0)
                                self.fetchProductDetails(self.products[0]);
                        })
                        .catch(err => console.error('Fout: ' + err));
                },

                // clients

                 fetchClients: function () {
                    self = this;
                    fetch(`${apiUri}Client`)
                        .then(res => res.json())
                        .then(function (clients) {
                            clients.forEach(function (client, i) {
                                client.isActive = false;
                            });
                            self.clients = clients;
                            self.messageClientForm = 'Overzicht klanten per Id';
                            if (self.clients.length > 0) {
                                self.fetchClientDetails(self.clients[0]);
                            }
                        })
                        .catch(err => console.error('Fout: ' + err));
                 },

                  fetchClientDetails: function (client) {
                    self = this;
                    if (!self.isReadOnly) return;
                    fetch(`${apiUri}Client/${client.id}`)
                        .then(res => res.json())
                        //.then(function (test) {console.log(test)})
                        .then(function (res) {
                            self.currentClient = res;
                            self.makeClientActive(client.id);
                        })
                        .catch(err => console.error('Fout: ' + err));
                  },

                   makeClientActive: function (clientId) {
                    self.clients.forEach(function (client) {
                        client.isActive = client.id === clientId ? true : false;
                    });
                   },

                   getClientClass: function (client) {
                      if (client.isActive) return 'list-group-item active';
                      return 'list-group-item';
                   },

                   
                toEditClientMode: function (isEdit) {
                    self = this;
                    self.isReadOnly = false;
                    self.isEdit = isEdit;
                    if (!isEdit) {
                        self.currentClient = { "name": "", "password": "", "email": "", "userId": "",  "orders": [] };
                    }
                },
                saveClient: function () {
                    var self = this;
                   

                    var ajaxHeaders = new Headers();
                    ajaxHeaders.append("Content-Type", "application/json");
                    var ajaxConfig = {
                        method: 'PUT',
                        body: JSON.stringify(self.currentClient),
                        headers: ajaxHeaders
                    };

                    if (self.isEdit) {
                        let myRequest = new Request(`${apiUri}Client/${self.currentClient.id}`, ajaxConfig);
                        fetch(myRequest)
                            .then(res => res.json())
                            .then(res => {
                                self.updateClientList(res);
                            })
                            .catch(err => console.error('Fout: ' + err));
                    }
                    else {
                        ajaxConfig.method = 'POST';
                        let myRequest = new Request(`${apiUri}Client/`, ajaxConfig);
                        fetch(myRequest)
                            .then(res => res.json())
                            .then(res => {
                                self.addClientToList(res);
                            })
                            .catch(err => console.error('Fout: ' + err));
                    }
                    self.isEdit = false;
                    self.isReadOnly = true;
                },

                  addClientToList: function (client) {

                    self.currentClient.id = client.id;
                    self.clients.push(client);
                    self.fetchClientDetails(self.clients[self.clients.length - 1]);
                },
                updateClientList: function (client) {

                    var updatedClient = self.clients.filter(c => c.id === client.id)[0];
                    updatedClient.name = client.name;
                },
                cancelForClientForm: function () {
                    var self = this;
                    self.isReadOnly = true;
                    self.isEdit = false;
                    if (self.isEdit) {
                        self.fetchClientDetails(self.currentClient);
                    } else {
                        self.fetchClientDetails(self.clients[0]);
                    }
                },
                deleteClient: function () {
                    self = this;
                    fetch(`${apiUri}Client/${self.currentClient.id}`, { method: 'DELETE' })
                        .then(res => res.json())
                        .then(function (res) {
                            self.clients.forEach(function (client, i) {
                                if (client.id === self.currentClient.id) {
                                    self.clients.splice(i, 1);
                                    return;
                                }
                            });
                            if (self.clients.length > 0)
                                self.fetchClientDetails(self.clients[0]);
                        })
                        .catch(err => console.error('Fout: ' + err));
                 },
                //orders

                 fetchOrders: function () {
                    self = this;
                    fetch(`${apiUri}Orders`)
                        .then(res => res.json())
                        .then(function (orders) {
                            orders.forEach(function (order, i) {
                                order.isActive = false;
                            });
                            self.orders = orders;
                            self.messageOrdersForm = 'Bestelling Id';
                            if (self.orders.length > 0) {
                                self.fetchOrderDetails(self.orders[0]);
                            }
                        })

                        .catch(err => console.error('Fout: ' + err));
                 },

                fetchOrderDetails: function (order) {
                    self = this;
                    if (!self.isReadOnly) return;
                    fetch(`${apiUri}Orders/${order.id}`)
                        .then(res => res.json())
                        //.then(function (test) {console.log(test)})
                        .then(function (res) {
                            self.currentOrder = res;
                            self.fetchOrderDetailsByOrderId(self.currentOrder.id)
                            self.makeOrderActive(order.id);
                        })
                        .catch(err => console.error('Fout: ' + err));
                },

                fetchOrderDetailsByOrderId: function (orderId) {
                  self = this;
                  fetch(`${apiUri}OrderDetails/GetByOrderId/${orderId}`)           
                   .then(res => res.json())
                            .then(function (res) {
                                self.orderDetails = res;
                                console.log(res)
                            })
                            .catch(error => console.log(error))
                },

                makeOrderActive: function (orderId) {
                    self.orders.forEach(function (order) {
                        order.isActive = order.id === orderId ? true : false;
                    });
                },

                  getOrderClass: function (order) {
                      if (order.isActive) return 'list-group-item active';
                      return 'list-group-item';
                   },


                   
                toEditOrderMode: function (isEdit) {
                    self = this;
                    self.isReadOnly = false;
                    self.isEdit = isEdit;
                    if (!isEdit) {
                        self.currentOrder = { "name": "", "address": "", "dateOrder": "", "clientId": "", "totalOrder":"", "orderDetails": [] };
                    }
                },
                saveOrder: function () {
                    var self = this;
                    var ajaxHeaders = new Headers();
                    ajaxHeaders.append("Content-Type", "application/json");
                    var ajaxConfig = {
                        method: 'PUT',
                        body: JSON.stringify(self.currentOrder),
                        headers: ajaxHeaders
                    };

                    if (self.isEdit) {
                        let myRequest = new Request(`${apiUri}Orders/${self.currentOrder.id}`, ajaxConfig);
                        fetch(myRequest)
                            .then(res => res.json())
                            .then(res => {
                                self.updateOrderList(res);
                            })
                            .catch(err => console.error('Fout: ' + err));
                    }
                    else {
                        ajaxConfig.method = 'POST';
                        let myRequest = new Request(`${apiUri}Orders/`, ajaxConfig);
                        fetch(myRequest)
                            .then(res => res.json())
                            .then(res => {
                                self.addOrderToList(res);
                            })
                            .catch(err => console.error('Fout: ' + err));
                    }
                    self.isEdit = false;
                    self.isReadOnly = true;
                },

                 addOrderToList: function (order) {

                    self.currentOrder.id = order.id;
                    self.orders.push(order);
                    self.fetchOrderDetails(self.orders[self.orders.length - 1]);
                },
                updateOrderList: function (order) {

                    var updatedOrder = self.orders.filter(o => o.id === order.id)[0];
                    updatedOrder.id = order.id;
                },
                cancelForOrderForm: function () {
                    var self = this;
                    self.isReadOnly = true;
                    self.isEdit = false;
                    if (self.isEdit) {
                        self.fetchOrderDetails(self.currentOrder);
                    } else {
                        self.fetchOrderDetails(self.orders[0]);
                    }
                },
                deleteOrder: function () {
                    self = this;
                    fetch(`${apiUri}Orders/${self.currentOrder.id}`, { method: 'DELETE' })
                        .then(res => res.json())
                        .then(function (res) {
                            self.orders.forEach(function (order, i) {
                                if (order.id === self.currentOrder.id) {
                                    self.orders.splice(i, 1);
                                    return;
                                }
                            });
                            if (self.orders.length > 0)
                                self.fetchOrderDetails(self.orders[0]);
                        })
                        .catch(err => console.error('Fout: ' + err));
                },

                // image for products
              onFileSelected(event) {
                  self.selectedFile = event.target.files[0]
              },

              onUpload: function () {
                  self = this;
                  const fd = new FormData();
                  fd.append('formFile', self.selectedFile, self.selectedFile.name)
                  var ajaxConfig = {
                      method: 'POST',
                      body: fd,
                  };
                  let myRequest = new Request(`${apiUri}product/image`, ajaxConfig);
                  fetch(myRequest)                 
                      .then(res => {
                          console.log(res)
                      });
              },

              //categories

                fetchProductTypes: function () {
                    self = this;
                    fetch(`${apiUri}ProductTypes`)
                        .then(res => res.json())
                        .then(function (categories) {
                            categories.forEach(function (categorie, i) {
                                categorie.isActive = false;
                            });
                            self.categories = categories;
                            self.messageCategoriesForm = 'Overzicht categories per Id';
                            if (self.categories.length > 0) {
                                self.fetchCategorieDetails(self.categories[0]);
                            }
                        })
                        .catch(err => console.error('Fout: ' + err));
                 },

                  fetchCategorieDetails: function (categorie) {
                    self = this;
                    if (!self.isReadOnly) return;
                    fetch(`${apiUri}ProductTypes/${categorie.id}`)
                        .then(res => res.json())
                        //.then(function (test) {console.log(test)})
                        .then(function (res) {
                            self.currentCategorie = res;
                            self.makeCategorieActive(categorie.id);
                        })
                        .catch(err => console.error('Fout: ' + err));
                  },

                   makeCategorieActive: function (categorieId) {
                    self.categories.forEach(function (categorie) {
                        categorie.isActive = categorie.id === categorieId ? true : false;
                    });
                   },

                   getCategorieClass: function (categorie) {
                      if (categorie.isActive) return 'list-group-item active';
                      return 'list-group-item';
                   },

                   
                toEditCategorieMode: function (isEdit) {
                    self = this;
                    self.isReadOnly = false;
                    self.isEdit = isEdit;
                    if (!isEdit) {
                        self.currentCategorie = { "name": ""};
                    }
                },
                saveCategorie: function () {
                    var self = this;
                   

                    var ajaxHeaders = new Headers();
                    ajaxHeaders.append("Content-Type", "application/json");
                    var ajaxConfig = {
                        method: 'PUT',
                        body: JSON.stringify(self.currentCategorie),
                        headers: ajaxHeaders
                    };

                    if (self.isEdit) {
                        let myRequest = new Request(`${apiUri}ProductTypes/${self.currentCategorie.id}`, ajaxConfig);
                        fetch(myRequest)
                            .then(res => res.json())
                            .then(res => {
                                self.updateCategorieList(res);
                            })
                            .catch(err => console.error('Fout: ' + err));
                    }
                    else {
                        ajaxConfig.method = 'POST';
                        let myRequest = new Request(`${apiUri}ProductTypes/`, ajaxConfig);
                        fetch(myRequest)
                            .then(res => res.json())
                            .then(res => {
                                self.addCategorieToList(res);
                            })
                            .catch(err => console.error('Fout: ' + err));
                    }
                    self.isEdit = false;
                    self.isReadOnly = true;
                },

                  addCategorieToList: function (categorie) {

                    self.currentCategorie.id = categorie.id;
                    self.categories.push(categorie);
                    self.fetchCategorieDetails(self.categories[self.categories.length - 1]);
                },
                updateCategorieList: function (categorie) {

                    var updatedCategorie = self.categories.filter(c => c.id === categorie.id)[0];
                    updatedCategorie.name = categorie.name;
                },
                cancelForCategorieForm: function () {
                    var self = this;
                    self.isReadOnly = true;
                    self.isEdit = false;
                    if (self.isEdit) {
                        self.fetchCategorieDetails(self.currentCategorie);
                    } else {
                        self.fetchCategorieDetails(self.categories[0]);
                    }
                },
                deleteCategory: function () {
                    self = this;
                    fetch(`${apiUri}ProductTypes/${self.currentCategorie.id}`, { method: 'DELETE' })
                        .then(res => res.json())
                        .then(function (res) {
                            self.categories.forEach(function (categorie, i) {
                                if (categorie.id === self.currentCategorie.id) {
                                    self.categories.splice(i, 1);
                                    return;
                                }
                            });
                            if (self.categories.length > 0)
                                self.fetchCategorieDetails(self.categories[0]);
                        })
                        .catch(err => console.error('Fout: ' + err));
                 },

                //instrumentTypes

                  fetchInstrumentTypes: function () {
                    self = this;
                    fetch(`${apiUri}InstrumentTypes`)
                        .then(res => res.json())
                        .then(function (instrumentTypes) {
                            instrumentTypes.forEach(function (instrumentType, i) {
                                instrumentType.isActive = false;
                            });
                            self.instrumentTypes = instrumentTypes;
                            self.messageForm = 'Overzicht per Id';
                            if (self.instrumentTypes.length > 0) {
                                self.fetchInstrumentTypeDetails(self.instrumentTypes[0]);
                            }
                        })
                        .catch(err => console.error('Fout: ' + err));
                 },

                  fetchInstrumentTypeDetails: function (instrumentType) {
                    self = this;
                    if (!self.isReadOnly) return;
                    fetch(`${apiUri}InstrumentTypes/${instrumentType.id}`)
                        .then(res => res.json())
                        //.then(function (test) {console.log(test)})
                        .then(function (res) {
                            self.currentInstrumentType = res;
                            self.makeInstrumentTypeActive(instrumentType.id);
                        })
                        .catch(err => console.error('Fout: ' + err));
                  },

                   makeInstrumentTypeActive: function (instrumentTypeId) {
                    self.instrumentTypes.forEach(function (instrumentType) {
                        instrumentType.isActive = instrumentType.id === instrumentTypeId ? true : false;
                    });
                   },

                   getInstrumentTypeClass: function (instrumentType) {
                      if (instrumentType.isActive) return 'list-group-item active';
                      return 'list-group-item';
                   },

                   
                toEditInstrumentTypeMode: function (isEdit) {
                    self = this;
                    self.isReadOnly = false;
                    self.isEdit = isEdit;
                    if (!isEdit) {
                        self.currentInstrumentType = { "name": ""};
                    }
                },
                saveInstrumentType: function () {
                    var self = this;
                   

                    var ajaxHeaders = new Headers();
                    ajaxHeaders.append("Content-Type", "application/json");
                    var ajaxConfig = {
                        method: 'PUT',
                        body: JSON.stringify(self.currentInstrumentType),
                        headers: ajaxHeaders
                    };

                    if (self.isEdit) {
                        let myRequest = new Request(`${apiUri}InstrumentTypes/${self.currentInstrumentType.id}`, ajaxConfig);
                        fetch(myRequest)
                            .then(res => res.json())
                            .then(res => {
                                self.updateInstrumentTypeList(res);
                            })
                            .catch(err => console.error('Fout: ' + err));
                    }
                    else {
                        ajaxConfig.method = 'POST';
                        let myRequest = new Request(`${apiUri}InstrumentTypes/`, ajaxConfig);
                        fetch(myRequest)
                            .then(res => res.json())
                            .then(res => {
                                self.addInstrumentTypeToList(res);
                            })
                            .catch(err => console.error('Fout: ' + err));
                    }
                    self.isEdit = false;
                    self.isReadOnly = true;
                },

                  addInstrumentTypeToList: function (instrumentType) {

                    self.currentInstrumentType.id = instrumentType.id;
                    self.instrumentTypes.push(instrumentType);
                    self.fetchInstrumentTypeDetails(self.instrumentTypes[self.instrumentTypes.length - 1]);
                },
                updateInstrumentTypeList: function (instrumentType) {

                    var updatedInstrumentType = self.instrumentTypes.filter(it => it.id === instrumentType.id)[0];
                    updatedInstrumentType.name = instrumentType.name;
                },
                cancelForInstrumentTypeForm: function () {
                    var self = this;
                    self.isReadOnly = true;
                    self.isEdit = false;
                    if (self.isEdit) {
                        self.fetchInstrumentTypeDetails(self.currentInstrumentType);
                    } else {
                        self.fetchInstrumentTypeDetails(self.instrumentTypes[0]);
                    }
                },
                deleteInstrumentType: function () {
                    self = this;
                    fetch(`${apiUri}InstrumentTypes/${self.currentInstrumentType.id}`, { method: 'DELETE' })
                        .then(res => res.json())
                        .then(function (res) {
                            self.instrumentTypes.forEach(function (instrumentType, i) {
                                if (instrumentType.id === self.currentInstrumentType.id) {
                                    self.instrumentTypes.splice(i, 1);
                                    return;
                                }
                            });
                            if (self.instrumentTypes.length > 0)
                                self.fetchInstrumentTypeDetails(self.instrumentTypes[0]);
                        })
                        .catch(err => console.error('Fout: ' + err));
                },

                // artists

                  fetchArtists: function () {
                    self = this;
                    fetch(`${apiUri}Artists`)
                        .then(res => res.json())
                        //.then(function (test) {console.log(test)})
                        .then(function (artists) {
                                artists.forEach(function (artist, i) {
                                artist.isActive = false;
                            });

                            self.artists = artists;
                            self.messageForm = 'Overzicht per Id';
                            if (self.artists.length > 0) {
                                self.fetchArtistDetails(self.artists[0]);
                            }

                        })
                        .catch(err => console.error('Fout: ' + err));
                   },
                

                  fetchArtistDetails: function (artist) {
                    self = this;
                    if (!self.isReadOnly) return;
                    fetch(`${apiUri}Artists/${artist.id}`)
                        .then(res => res.json())
                        //.then(function (test) {console.log(test)})
                        .then(function (res) {
                            self.currentArtist = res;
                            self.makeArtistActive(artist.id);
                        })
                        .catch(err => console.error('Fout: ' + err));
                  },

                   makeArtistActive: function (artistId) {
                    self.artists.forEach(function (artist) {
                        artist.isActive = artist.id === artistId ? true : false;
                    });
                   },

                   getArtistClass: function (artist) {
                      if (artist.isActive) return 'list-group-item active';
                      return 'list-group-item';
                   },

                   
                toEditArtistMode: function (isEdit) {
                    self = this;
                    self.isReadOnly = false;
                    self.isEdit = isEdit;
                    if (!isEdit) {
                        self.currentArtist = { "name": "", "genreId": 0, "genre": { "name": "",  "id": 0 }};
                    }
                },
                saveArtist: function () {
                    var self = this;
                    self.currentArtist.genreId = self.currentArtist.genre.id;
                   
                    var ajaxHeaders = new Headers();
                    ajaxHeaders.append("Content-Type", "application/json");
                    var ajaxConfig = {
                        method: 'PUT',
                        body: JSON.stringify(self.currentArtist),
                        headers: ajaxHeaders
                    };

                    if (self.isEdit) {
                        let myRequest = new Request(`${apiUri}Artists/${self.currentArtist.id}`, ajaxConfig);
                        fetch(myRequest)
                            .then(res => res.json())
                            .then(res => {
                                self.updateArtistList(res);
                            })
                            .catch(err => console.error('Fout: ' + err));
                    }
                    else {
                        ajaxConfig.method = 'POST';
                        let myRequest = new Request(`${apiUri}artists/`, ajaxConfig);
                        fetch(myRequest)
                            .then(res => res.json())
                            .then(res => {
                                self.addArtistToList(res);
                            })
                            .catch(err => console.error('Fout: ' + err));
                    }
                    self.isEdit = false;
                    self.isReadOnly = true;
                },

                  addArtistToList: function (artist) {

                    self.currentArtist.id = artist.id;
                    self.artists.push(artist);
                    self.fetchArtistDetails(self.artists[self.artists.length - 1]);
                },
                updateArtistList: function (artist) {

                    var updatedArtist = self.artists.filter(a => a.id === artist.id)[0];
                    updatedArtist.name = artist.name;
                },
                cancelForArtistForm: function () {
                    var self = this;
                    self.isReadOnly = true;
                    self.isEdit = false;
                    if (self.isEdit) {
                        self.fetchArtistDetails(self.currentArtist);
                    } else {
                        self.fetchArtistDetails(self.artists[0]);
                    }
                },
                deleteArtist: function () {
                    self = this;
                    fetch(`${apiUri}artists/${self.currentArtist.id}`, { method: 'DELETE' })
                        .then(res => res.json())
                        .then(function (res) {
                            self.artists.forEach(function (artist, i) {
                                if (artist.id === self.currentArtist.id) {
                                    self.artists.splice(i, 1);
                                    return;
                                }
                            });
                            if (self.artists.length > 0)
                                self.fetchArtistDetails(self.artists[0]);
                        })
                        .catch(err => console.error('Fout: ' + err));
                },


                // genres
                
                  fetchGenres: function () {
                    self = this;
                    fetch(`${apiUri}Genres`)
                        .then(res => res.json())
                        //.then(function (test) {console.log(test)})
                        .then(function (genres) {
                                genres.forEach(function (genre, i) {
                                genre.isActive = false;
                            });

                            self.genres = genres;
                            self.messageForm = 'Overzicht per Id';
                            if (self.genres.length > 0) {
                                self.fetchGenreDetails(self.genres[0]);
                            }

                        })
                        .catch(err => console.error('Fout: ' + err));
                   },
                

                  fetchGenreDetails: function (genre) {
                    self = this;
                    if (!self.isReadOnly) return;
                    fetch(`${apiUri}genres/${genre.id}`)
                        .then(res => res.json())
                        //.then(function (test) {console.log(test)})
                        .then(function (res) {
                            self.currentGenre = res;
                            self.makeGenreActive(genre.id);
                        })
                        .catch(err => console.error('Fout: ' + err));
                  },

                   makeGenreActive: function (genreId) {
                    self.genres.forEach(function (genre) {
                        genre.isActive = genre.id === genreId ? true : false;
                    });
                   },

                   getGenreClass: function (genre) {
                      if (genre.isActive) return 'list-group-item active';
                      return 'list-group-item';
                   },

                   
                toEditGenreMode: function (isEdit) {
                    self = this;
                    self.isReadOnly = false;
                    self.isEdit = isEdit;
                    if (!isEdit) {
                        self.currentGenre = { "name": ""};
                    }
                },
                saveGenre: function () {
                    var self = this;
                                   
                    var ajaxHeaders = new Headers();
                    ajaxHeaders.append("Content-Type", "application/json");
                    var ajaxConfig = {
                        method: 'PUT',
                        body: JSON.stringify(self.currentGenre),
                        headers: ajaxHeaders
                    };

                    if (self.isEdit) {
                        let myRequest = new Request(`${apiUri}Genres/${self.currentGenre.id}`, ajaxConfig);
                        fetch(myRequest)
                            .then(res => res.json())
                            .then(res => {
                                self.updateGenreList(res);
                            })
                            .catch(err => console.error('Fout: ' + err));
                    }
                    else {
                        ajaxConfig.method = 'POST';
                        let myRequest = new Request(`${apiUri}genres/`, ajaxConfig);
                        fetch(myRequest)
                            .then(res => res.json())
                            .then(res => {
                                self.addGenreToList(res);
                            })
                            .catch(err => console.error('Fout: ' + err));
                    }
                    self.isEdit = false;
                    self.isReadOnly = true;
                },

                  addGenreToList: function (genre) {

                    self.currentGenre.id = genre.id;
                    self.genres.push(genre);
                    self.fetchGenreDetails(self.genres[self.genres.length - 1]);
                },
                updateGenreList: function (genre) {

                    var updatedGenre = self.genres.filter(g => g.id === genre.id)[0];
                    updatedGenre.name = genre.name;
                },
                cancelForGenreForm: function () {
                    var self = this;
                    self.isReadOnly = true;
                    self.isEdit = false;
                    if (self.isEdit) {
                        self.fetchGenreDetails(self.currentGenre);
                    } else {
                        self.fetchGenreDetails(self.genres[0]);
                    }
                },
                deleteGenre: function () {
                    self = this;
                    fetch(`${apiUri}genres/${self.currentGenre.id}`, { method: 'DELETE' })
                        .then(res => res.json())
                        .then(function (res) {
                            self.genres.forEach(function (genre, i) {
                                if (genre.id === self.currentGenre.id) {
                                    self.genres.splice(i, 1);
                                    return;
                                }
                            });
                            if (self.genres.length > 0)
                                self.fetchGenreDetails(self.genres[0]);
                        })
                        .catch(err => console.error('Fout: ' + err));
              },

                // confirm 

              confirmDeleteCategory: function () {
                var self = this;
             
                var choice = confirm("Wil je het echt verwijderen?");
                  if (choice == true)
                  {
                    self.deleteCategory();
                  }                                       
              },

               confirmDeleteProduct: function () {
                var self = this;
             
                var choice = confirm("Wil je het echt verwijderen?");
                  if (choice == true)
                  {
                    self.deleteProduct();
                  }                                       
              },

                confirmDeleteArtist: function () {
                var self = this;
             
                var choice = confirm("Wil je het echt verwijderen?");
                  if (choice == true)
                  {
                    self.deleteArtist();
                  }                                       
                },

                 confirmDeleteGenre: function () {
                var self = this;
             
                var choice = confirm("Wil je het echt verwijderen?");
                  if (choice == true)
                  {
                    self.deleteGenre();
                  }                                       
                 },

                  confirmDeleteInstrumentType: function () {
                  var self = this;
             
                  var choice = confirm("Wil je het echt verwijderen?");
                  if (choice == true)
                  {
                    self.deleteInstrumentType();
                  }                                       
                  },

                  confirmDeleteOrder: function () {
                  var self = this;
             
                  var choice = confirm("Wil je het echt verwijderen?");
                  if (choice == true)
                    {
                    self.deleteOrder();
                     }                                       
              },

                   confirmDeleteClient: function () {
                  var self = this;
             
                  var choice = confirm("Wil je het echt verwijderen?");
                  if (choice == true)
                    {
                    self.deleteClient();
                     }                                       
              },



          }

      });
    </script>

}



